#! /bin/sh
### BEGIN INIT INFO
# Provides:          airsonic
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Airsonic daemon
# Description:       Starts the Airsonic daemon. Subsonic is a web-based
#                    music streamer, jukebox and Podcast receiver.
#                    See http://airsonic.org for more details.
### END INIT INFO

# Author: Sindre Mehus <sindre@activeobjects.no>

# To change the startup parameters of Airsonic, modify the service
# configuration file /etc/default/airsonic rather than this file.
[ -r /etc/default/airsonic ] && . /etc/default/airsonic

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Airsonic Daemon"
NAME="airsonic"
PIDFILE="/var/run/$NAME.pid"
DAEMON="/usr/bin/$NAME"
DAEMON_ARGS="--pidfile=$PIDFILE $AIRSONIC_ARGS"
SCRIPTNAME="/etc/init.d/$NAME"

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Run as root if AIRSONIC_USER is not set.
[ "$AIRSONIC_USER" = "" ] && AIRSONIC_USER=root


# Make sure Airsonic is started with system locale
if [ -r /etc/default/locale ]; then
    . /etc/default/locale 
    export LANG
fi

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

    if [ -e $PIDFILE ]
    then
	ps -p $(cat $PIDFILE) > /dev/null
	[ "$?" = 0 ] && return 1
    fi

    touch $PIDFILE
    chown  $AIRSONIC_USER  $PIDFILE
    [ -e /var/airsonic ] && chown -R $AIRSONIC_USER /var/airsonic
    [ -e /tmp/airsonic ] && chown -R $AIRSONIC_USER /tmp/airsonic

    start-stop-daemon --start -c $AIRSONIC_USER --pidfile $PIDFILE --exec $DAEMON -- $DAEMON_ARGS || return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2

	# Many daemons don't delete their pidfiles when they exit.
        rm -f $PIDFILE
	return "$RETVAL"
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
